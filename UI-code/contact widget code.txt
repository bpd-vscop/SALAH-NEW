'use client';

import { useState, useTransition, useEffect, useRef } from 'react';
import { useForm, SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { useLocalStorage } from '@/hooks/use-local-storage';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { useToast } from "@/hooks/use-toast";
import { enhanceContactWidget, EnhanceContactWidgetInput } from '@/ai/flows/enhance-contact-widget';
import { AnimatePresence, motion } from 'framer-motion';
import { X, Send, ArrowLeft, Loader2, CheckCircle, Phone, Video } from 'lucide-react';
import Image from 'next/image';

const formSchema = z.object({
  name: z.string().min(2, { message: 'Name must be at least 2 characters.' }),
  phone: z.string().min(10, { message: 'Please enter a valid phone number.' }),
  email: z.string().email({ message: 'Please enter a valid email address.' }),
  message: z.string().min(10, { message: 'Message must be at least 10 characters.' }),
});

type FormData = z.infer<typeof formSchema>;

const WhatsAppIcon = (props: React.SVGProps<SVGSVGElement>) => (
  <svg
    height="200px"
    width="200px"
    version="1.1"
    id="Layer_1"
    xmlns="http://www.w3.org/2000/svg"
    xmlnsXlink="http://www.w3.org/1999/xlink"
    viewBox="0 0 512 512"
    xmlSpace="preserve"
    fill="#ffffff"
    {...props}
  >
    <g id="SVGRepo_bgCarrier" strokeWidth="0"></g>
    <g id="SVGRepo_tracerCarrier" strokeLinecap="round" strokeLinejoin="round"></g>
    <g id="SVGRepo_iconCarrier">
      <path
        style={{ fill: "#FEFEFE" }}
        d="M0,512l35.31-128C12.359,344.276,0,300.138,0,254.234C0,114.759,114.759,0,255.117,0 
        S512,114.759,512,254.234S395.476,512,255.117,512c-44.138,0-86.51-14.124-124.469-35.31L0,512z"
      ></path>
      <path
        style={{ fill: "#25D366" }}
        d="M137.71,430.786l7.945,4.414c32.662,20.303,70.621,32.662,110.345,32.662 
        c115.641,0,211.862-96.221,211.862-213.628S371.641,44.138,255.117,44.138S44.138,137.71,44.138,254.234 
        c0,40.607,11.476,80.331,32.662,113.876l5.297,7.945l-20.303,74.152L137.71,430.786z"
      ></path>
      <path
        style={{ fill: "#FEFEFE" }}
        d="M187.145,135.945l-16.772-0.883c-5.297,0-10.593,1.766-14.124,5.297 
        c-7.945,7.062-21.186,20.303-24.717,37.959c-6.179,26.483,3.531,58.262,26.483,90.041s67.09,82.979,144.772,105.048 
        c24.717,7.062,44.138,2.648,60.028-7.062c12.359-7.945,20.303-20.303,22.952-33.545l2.648-12.359 
        c0.883-3.531-0.883-7.945-4.414-9.71l-55.614-25.6c-3.531-1.766-7.945-0.883-10.593,2.648l-22.069,28.248 
        c-1.766,1.766-4.414,2.648-7.062,1.766c-15.007-5.297-65.324-26.483-92.69-79.448c-0.883-2.648-0.883-5.297,0.883-7.062 
        l21.186-23.834c1.766-2.648,2.648-6.179,1.766-8.828l-25.6-57.379C193.324,138.593,190.676,135.945,187.145,135.945"
      ></path>
    </g>
  </svg>
);

const PhoneIcon = (props: React.SVGProps<SVGSVGElement>) => (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" {...props}>
        <path d="M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1C9.91 21 3 14.09 3 6c0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z"/>
    </svg>
);

const ActionPhoneIcon = (props: React.SVGProps<SVGSVGElement>) => (
  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" {...props}>
        <path d="M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1C9.91 21 3 14.09 3 6c0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z"/>
    </svg>
);

const MailIcon = (props: React.SVGProps<SVGSVGElement>) => (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" {...props}>
        <path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/>
    </svg>
);

export function ContactWidget() {
  const [isOpen, setIsOpen] = useState(false);
  const [activeView, setActiveView] = useState<'none' | 'whatsapp' | 'email'>('none');
  const [whatsappMessage, setWhatsappMessage] = useState('');
  const [whatsappOpenTime, setWhatsappOpenTime] = useState<string>('');
  const [hasAnimatedMessage, setHasAnimatedMessage] = useState(false);
  const [showTyping, setShowTyping] = useState(false);
  
  const [isPending, startTransition] = useTransition();
  const [formSubmitted, setFormSubmitted] = useState(false);
  const phoneNumber = '+2120607154474';
  const widgetRef = useRef<HTMLDivElement>(null);

  const [formData, setFormData] = useLocalStorage<Partial<FormData>>('contact-form', {
    name: '',
    phone: '',
    email: '',
    message: '',
  });

  const { toast } = useToast();

  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: formData.name || '',
      phone: formData.phone || '',
      email: formData.email || '',
      message: formData.message || '',
    },
  });
  
  useEffect(() => {
    form.reset({
      name: formData.name || '',
      phone: formData.phone || '',
      email: formData.email || '',
      message: formData.message || '',
    });
  }, [formData, form]);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (isOpen && activeView === 'none' && widgetRef.current && !widgetRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen, activeView]);

  const handleFormValueChange = () => {
    const values = form.getValues();
    setFormData(values);
  };
  
  const onEmailSubmit: SubmitHandler<FormData> = (data) => {
    startTransition(async () => {
      try {
        const aiInput: EnhanceContactWidgetInput = {
          userInput: data.message,
          context: `POS Go Landing Page Inquiry from ${data.name} (${data.phone}, ${data.email})`,
          sentiment: 'neutral',
        };
        
        await enhanceContactWidget(aiInput);
        
        setFormSubmitted(true);
        setFormData({ name: '', phone: '', email: '', message: '' });
        form.reset({ name: '', phone: '', email: '', message: '' });

      } catch (error) {
        console.error('AI enhancement failed:', error);
        toast({
          variant: "destructive",
          title: "Submission Failed",
          description: "There was an error processing your request. Please try again.",
        })
      }
    });
  };

  const handleWhatsAppSend = () => {
    if (whatsappMessage.trim()) {
      const url = `https://wa.me/${phoneNumber.replace('+', '')}?text=${encodeURIComponent(whatsappMessage)}`;
      window.open(url, '_blank');
      setWhatsappMessage('');
    }
  };

  const handleWhatsAppCall = () => {
    // WhatsApp call URL format
    const url = `https://wa.me/${phoneNumber.replace('+', '')}`;
    window.open(url, '_blank');
  };

  const handleWhatsAppVideoCall = () => {
    // WhatsApp video call - opens WhatsApp and user can manually start video call
    const url = `https://wa.me/${phoneNumber.replace('+', '')}`;
    window.open(url, '_blank');
  };

  const resetState = (e?: React.MouseEvent) => {
    e?.stopPropagation();
    setIsOpen(false);
    setActiveView('none');
    setFormSubmitted(false);
    // Don't reset hasAnimatedMessage here - keep it until full page refresh
  };
  
  const backToMenu = (e?: React.MouseEvent) => {
      e?.stopPropagation();
      setActiveView('none');
      setFormSubmitted(false);
      // Re-open the icon menu
      setIsOpen(true);
      // Don't reset hasAnimatedMessage here - keep it until full page refresh
  }

  const toggleOpen = () => {
    if (isOpen) {
        setIsOpen(false);
        setActiveView('none');
        setFormSubmitted(false);
    } else {
        setIsOpen(true);
    }
  }

  const handleWhatsAppOpen = () => {
    // Capture the current time when WhatsApp is opened
    const now = new Date();
    const timeString = now.toLocaleTimeString('en-US', { 
      hour: 'numeric', 
      minute: '2-digit',
      hour12: true 
    });
    setWhatsappOpenTime(timeString);
    
    // Show typing indicator only on first open
    if (!hasAnimatedMessage) {
      setShowTyping(true);
      // Hide typing indicator after 1.5 seconds
      setTimeout(() => {
        setShowTyping(false);
      }, 1500);
    }
    
    setActiveView('whatsapp');
  };

  const handleOptionClick = (action: () => void) => {
    setIsOpen(false); // Close the icon bar first
    setTimeout(action, 300); // Allow time for animation before opening new view
  };

  const options = [
    { icon: <MailIcon className="h-6 w-6 text-white" />, action: () => setActiveView('email'), key: 'email', label: "Email" },
    { icon: <WhatsAppIcon className="h-6 w-6 text-white" />, action: handleWhatsAppOpen, key: 'whatsapp', label: "WhatsApp" },
    { icon: <ActionPhoneIcon className="h-6 w-6 text-white" />, action: () => { window.location.href = `tel:${phoneNumber}`; }, key: 'call', label: "Call" },
  ];

  return (
    <div className="fixed bottom-5 right-5 z-50" ref={widgetRef}>
      <div className="relative flex items-center justify-end h-16">
        
        <motion.div
          className="flex items-center justify-end rounded-full absolute right-0 overflow-hidden"
          initial={false}
          animate={{ width: isOpen ? 240 : 64, height: 64 }}
          transition={{ duration: 0.4, ease: [0.25, 1, 0.5, 1] }}
          style={{
            background: 'rgba(220, 38, 38, 0.15)',
            backdropFilter: 'blur(10px)',
            border: '1px solid rgba(220, 38, 38, 0.3)',
            boxShadow: '0 8px 32px 0 rgba(0, 0, 0, 0.3)',
          }}
        >
          <div 
            className="w-full h-full flex items-center justify-end rounded-full"
            style={{
              background: 'linear-gradient(145deg, rgba(220, 38, 38, 0.1) 0%, rgba(220, 38, 38, 0.05) 100%)',
            }}
          >
            <AnimatePresence>
                {isOpen && (
                <motion.div
                    className="flex items-center justify-evenly w-full px-4"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1, transition: { delay: 0.2 } }}
                    exit={{ opacity: 0, transition: { duration: 0.2 } }}
                >
                    {options.map((option) => (
                    <motion.button
                        key={option.key}
                        onClick={() => handleOptionClick(option.action)}
                        className="flex flex-col items-center gap-1 text-primary-foreground transition-all duration-300 hover:scale-110 hover:brightness-125"
                        whileHover={{ scale: 1.1 }}
                        whileTap={{ scale: 0.95 }}
                        initial={{ opacity: 0, scale: 0.5, y: 10 }}
                        animate={{ opacity: 1, scale: 1, y: 0 }}
                        exit={{ opacity: 0, scale: 0.5, y: 10 }}
                    >
                        {option.icon}
                        <span className="text-xs font-medium">{option.label}</span>
                    </motion.button>
                    ))}
                </motion.div>
                )}
            </AnimatePresence>
          </div>
        </motion.div>
        
        <AnimatePresence>
            {!isOpen && (
                <motion.button
                    onClick={toggleOpen}
                    className="w-16 h-16 rounded-full text-primary-foreground flex items-center justify-center shadow-2xl absolute right-0 transition-all duration-300 hover:scale-110"
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.95 }}
                    initial={{ opacity: 1, rotate: 0 }}
                    animate={{ opacity: 1, rotate: 0 }}
                    exit={{ opacity: 0, rotate: 45 }}
                    style={{
                      background: 'rgba(220, 38, 38, 0.2)',
                      backdropFilter: 'blur(10px)',
                      border: '1px solid rgba(220, 38, 38, 0.4)',
                      boxShadow: '0 8px 32px 0 rgba(0, 0, 0, 0.3)',
                    }}
                >
                    <PhoneIcon className="h-8 w-8" />
                </motion.button>
            )}
        </AnimatePresence>
      </div>

      <AnimatePresence>
          {activeView === 'whatsapp' && (
            <motion.div
              className="fixed inset-0 z-40 bg-black/50 backdrop-blur-sm"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
            >
              <motion.div
                key="whatsapp-view"
                className="w-[320px] h-[500px] flex flex-col fixed bottom-5 right-5 rounded-2xl overflow-hidden shadow-2xl"
                style={{ backgroundColor: '#0b141a' }}
                initial={{ opacity: 0, scale: 0.9, y: 20 }}
                animate={{ opacity: 1, scale: 1, y: 0 }}
                exit={{ opacity: 0, scale: 0.9, y: 20 }}
                transition={{ duration: 0.3, ease: 'easeOut' }}
                onClick={(e) => e.stopPropagation()}
              >
                {/* WhatsApp-style Header */}
                <header className="flex items-center p-3" style={{ backgroundColor: '#202c33' }}>
                  <Button 
                    variant="ghost" 
                    size="icon" 
                    onClick={backToMenu} 
                    className="mr-2 text-gray-300 hover:bg-gray-600"
                  >
                    <ArrowLeft className="h-5 w-5"/>
                  </Button>
                  
                  <div className="w-10 h-10 rounded-full bg-gray-500 flex items-center justify-center mr-3 overflow-hidden">
                    <Image 
                      src="https://placehold.co/40x40/25D366/ffffff.png?text=PG" 
                      width={40} 
                      height={40} 
                      alt="POS Go Support" 
                      className="rounded-full" 
                    />
                  </div>
                  
                  <div className="flex-grow">
                    <h3 className="font-medium text-white text-sm">POS Go Support</h3>
                    <p className="text-xs" style={{ color: '#8696a0' }}>Online</p>
                  </div>
                  
                  {/* Call and Video Call Buttons */}
                  <div className="flex items-center gap-2">
                    <Button 
                      variant="ghost" 
                      size="icon" 
                      onClick={handleWhatsAppVideoCall}
                      className="text-gray-300 hover:bg-gray-600 w-8 h-8"
                    >
                      <Video className="h-4 w-4"/>
                    </Button>
                    <Button 
                      variant="ghost" 
                      size="icon" 
                      onClick={handleWhatsAppCall}
                      className="text-gray-300 hover:bg-gray-600 w-8 h-8"
                    >
                      <Phone className="h-4 w-4"/>
                    </Button>
                  </div>
                </header>

                {/* Chat Area */}
                <div 
                  className="flex-grow p-4 space-y-3 overflow-y-auto"
                  style={{ 
                    backgroundColor: '#0b141a',
                    backgroundImage: `url("data:image/svg+xml,%3csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3e%3cg fill='none' fill-rule='evenodd'%3e%3cg fill='%23182229' fill-opacity='0.1'%3e%3cpath d='m36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3e%3c/g%3e%3c/g%3e%3c/svg%3e")` 
                  }}
                >
                  {/* Today indicator */}
                  <div className="flex justify-center">
                    <div className="bg-gray-700 px-3 py-1 rounded-full">
                      <p className="text-xs text-gray-300">Today</p>
                    </div>
                  </div>
                  
                  {/* Typing indicator - only shows on first load */}
                  <AnimatePresence>
                    {showTyping && (
                      <motion.div 
                        className="flex"
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        exit={{ opacity: 0 }}
                        transition={{ duration: 0.3 }}
                      >
                        <div 
                          className="bg-gray-700 p-3 rounded-lg rounded-tl-none"
                          style={{ backgroundColor: '#202c33' }}
                        >
                          <div className="flex items-center space-x-1">
                            <div className="flex space-x-1">
                              <motion.div 
                                className="w-2 h-2 bg-gray-400 rounded-full"
                                animate={{ scale: [1, 1.2, 1] }}
                                transition={{ duration: 0.6, repeat: Infinity, delay: 0 }}
                              />
                              <motion.div 
                                className="w-2 h-2 bg-gray-400 rounded-full"
                                animate={{ scale: [1, 1.2, 1] }}
                                transition={{ duration: 0.6, repeat: Infinity, delay: 0.2 }}
                              />
                              <motion.div 
                                className="w-2 h-2 bg-gray-400 rounded-full"
                                animate={{ scale: [1, 1.2, 1] }}
                                transition={{ duration: 0.6, repeat: Infinity, delay: 0.4 }}
                              />
                            </div>
                          </div>
                        </div>
                      </motion.div>
                    )}
                  </AnimatePresence>

                  {/* Support message */}
                  <motion.div 
                    className="flex"
                    initial={{ opacity: 0, y: 20, scale: 0.8 }}
                    animate={{ 
                      opacity: 1, 
                      y: 0, 
                      scale: 1,
                      transition: { 
                        duration: 0.6, 
                        delay: hasAnimatedMessage ? 0 : 1.6, // Slightly after typing indicator disappears
                        ease: "easeOut"
                      }
                    }}
                    onAnimationComplete={() => {
                      if (!hasAnimatedMessage) {
                        setHasAnimatedMessage(true);
                      }
                    }}
                  >
                    <div 
                      className="bg-gray-700 p-3 rounded-lg max-w-xs rounded-tl-none"
                      style={{ backgroundColor: '#202c33' }}
                    >
                      <p className="text-sm text-white">
                        Hello! 👋 Welcome to POS Go Support. How can we help you today?
                      </p>
                      <p className="text-xs mt-1" style={{ color: '#8696a0' }}>
                        {whatsappOpenTime || new Date().toLocaleTimeString('en-US', { 
                          hour: 'numeric', 
                          minute: '2-digit',
                          hour12: true 
                        })}
                      </p>
                    </div>
                  </motion.div>
                </div>

                {/* Input Area */}
                <footer className="p-3 flex items-center gap-2" style={{ backgroundColor: '#202c33' }}>
                  <div className="flex-grow relative">
                    <Input 
                      value={whatsappMessage}
                      onChange={(e) => setWhatsappMessage(e.target.value)}
                      placeholder="Type a message" 
                      className="bg-gray-700 border-none text-white placeholder:text-gray-400 pr-12 rounded-full"
                      style={{ backgroundColor: '#2a3942' }}
                      onKeyDown={(e) => e.key === 'Enter' && handleWhatsAppSend()}
                    />
                  </div>
                  <Button 
                    size="icon" 
                    onClick={handleWhatsAppSend} 
                    className="rounded-full w-10 h-10 bg-green-600 hover:bg-green-700 text-white"
                    style={{ backgroundColor: '#25D366' }}
                  >
                    <Send className="h-5 w-5"/>
                  </Button>
                </footer>
              </motion.div>
            </motion.div>
          )}
          
          {activeView === 'email' && (
            <motion.div
              className="fixed inset-0 z-40 bg-black/50 backdrop-blur-sm"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
            >
              <motion.div
                key="email-view"
                className="w-[320px] h-[500px] flex flex-col bg-card fixed bottom-5 right-5 rounded-2xl overflow-hidden shadow-2xl"
                initial={{ opacity: 0, scale: 0.9, y: 20 }}
                animate={{ opacity: 1, scale: 1, y: 0 }}
                exit={{ opacity: 0, scale: 0.9, y: 20 }}
                transition={{ duration: 0.3, ease: 'easeOut' }}
                onClick={(e) => e.stopPropagation()}
              >
                  <Card className="w-full h-full shadow-none border-0 rounded-none flex flex-col">
                      <form onSubmit={form.handleSubmit(onEmailSubmit)} onChange={handleFormValueChange} className="flex flex-col flex-grow">
                          <CardHeader>
                          <div className="flex justify-between items-center">
                              <Button variant="ghost" size="icon" onClick={backToMenu} type="button" disabled={formSubmitted}>
                                  <ArrowLeft className="h-4 w-4" />
                              </Button>
                              <CardTitle className="font-headline text-lg text-card-foreground">{formSubmitted ? 'Thank You!' : 'Contact Us'}</CardTitle>
                              <Button variant="ghost" size="icon" onClick={resetState} type="button">
                              <X className="h-4 w-4" />
                              </Button>
                          </div>
                          {!formSubmitted && <CardDescription className="text-muted-foreground text-center">We'll get back to you shortly.</CardDescription>}
                          </CardHeader>
                          <CardContent className="flex-grow overflow-y-auto">
                          {formSubmitted ? (
                              <div className="text-center space-y-4 py-8 h-full flex flex-col justify-center items-center">
                                  <CheckCircle className="h-16 w-16 text-green-500 mx-auto" />
                                  <p className="text-card-foreground">Your message has been sent successfully. Our team will contact you soon.</p>
                              </div>
                          ) : (
                              <Form {...form}>
                              <div className="space-y-4">
                                  <FormField control={form.control} name="name" render={({ field }) => (
                                  <FormItem><FormLabel>Name</FormLabel><FormControl><Input placeholder="John Doe" {...field} /></FormControl><FormMessage /></FormItem>
                                  )} />
                                  <FormField control={form.control} name="phone" render={({ field }) => (
                                  <FormItem><FormLabel>Phone Number</FormLabel><FormControl><Input placeholder="+1 (555) 123-4567" {...field} /></FormControl><FormMessage /></FormItem>
                                  )} />
                                  <FormField control={form.control} name="email" render={({ field }) => (
                                  <FormItem><FormLabel>Email</FormLabel><FormControl><Input placeholder="john.doe@example.com" {...field} /></FormControl><FormMessage /></FormItem>
                                  )} />
                                  <FormField control={form.control} name="message" render={({ field }) => (
                                  <FormItem><FormLabel>Message</FormLabel><FormControl><Textarea placeholder="How can we help?" {...field} rows={3} /></FormControl><FormMessage /></FormItem>
                                  )} />
                              </div>
                              </Form>
                            )}
                          </CardContent>
                          {!formSubmitted && (
                              <CardFooter>
                                  <Button className="w-full" type="submit" disabled={isPending}>
                                      {isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                                      {isPending ? 'Sending...' : 'Submit'}
                                  </Button>
                              </CardFooter>
                          )}
                      </form>
                  </Card>
              </motion.div>
                          </motion.div>
          )}

        </AnimatePresence>
    </div>
  );
}